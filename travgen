#!/usr/bin/python

"""
Character generator for Mongoose Traveller. Any unspecified options will be
generated randomly.

Usage: travgen char [--name NAME] [--homeworld WORLD]
                    [--ethnicity ETHNICITY] [--gender GENDER]
                    [--upp UPP] [--method METHOD] [--psi PSI]
                    [--terms TERMS] [--path PATH]
                    [--rand-age] [--max-careers CAREERS]
                    [--personality] [--random-seed SEED]
                    [--show-hist] [--list]
       travgen animal [--terrain TERRAIN] [--behavior BEHAVIOR]
                      [--order ORDER] [--sentient]
                      [--random-seed SEED]
       travgen UPP [--method METHOD] [--psi PSI]
       travgen roll DICE
       travgen (-h | --help)

Dice Roll Arguments:
    DICE    Number and sides of dice in '#d#' format, e.g., 2d6.

General Options:
    -m --method STR        Method for rolling UPP: normal, heroic, superheroic,
                             mediocre, or extreme. [default: normal]
    -r --random-seed HEX   Set random seed.

Character Generation Options:
    -n --name STR          Character name.
    -w --homeworld STR     Character's world of origin.
    -e --ethnicity STR     Ethnic group and random naming convention;
                             currently supports: American, Arabic, Brazilian,
                             British, Chechen, Chinese, Czech, Danish,
                             Filipino, Finnish, French, German, Greek,
                             Hungary, Irish, Italian, Jamaican, Japanese,
                             Korean, Mongolian, North Indian, Portuguese,
                             Roma, Russian, Senegalese, Sicilian, Spanish,
                             Thai.
    -g --gender STR        Male or female.
    -a --rand-age          Randomize term length (+/-1 year).
    -u --upp HEX           A pre-generated UPP.
    -i --psi STR           Psi attribute for a given campaign type: traditional,
                             psi-heavy, space opera, science fantast,
                             transcendent.
    -t --terms INT         Number of terms to serve. [default: 3]
    -p --path STR          Colon-delimited career path of the form:
                             "career:spec::career:spec::...".
    -P --personality       Random personality.
    -x --max-careers INT   Maximum number of careers.
    -s --show-hist         Show full career history.
    -l --list              Show available careers and specializations.

Animal Generation Options:
    --terrain TERRAIN     One of: Mountain, Hills, Open Ocean, Clear, Riverbank,
                            Swamp, Deep Ocean, Woods, Plain/Prairie, Forest,
                            Ocean Shallows, Rainforest, Rough, Beach, Desert,
                            Jungle.
    --behavior BEHAVIOR   One of: Intimidator, Siren, Reducer, Trapper,
                            Intermittent, Hijacker, Eater, Pouncer, Hunter,
                            Filter, Grazer, Carrion-Eater, Chaser, Brute Killer,
                            Gatherer, Swift Killer.
    --order ORDER         One of: Scavenger, Omnivore, Herbivore, Carnivore.
    --sentient            Creature has an intelligence greater than 1.

Other Options:
    -h --help
    --version

"""

__author__ = "GVH"
__version__ = "0.0.10"


import sys
from docopt import docopt
from random import seed
from time import time
from traveller.character import Character
from traveller.attributes import Stats
from traveller.animal import Animal
from traveller.dice import die
from traveller.data import (CAREERS, FALLBACK_CAREERS, SKILLS,
                            CHTHONIAN_STARS, DILETTANTE, AGENT,
                            SCOUNDREL, PSION)


#EXPANSIONS = ["Chthonian Stars", "Agent", "Scoundrel", "Dilettante"]
#EXPANSIONS = ["Chthonian Stars"]
EXPANSIONS = []


def set_expansions(E):
    global CAREERS
    global FALLBACK_CAREERS
    global SKILLS
    for exp in E:
        if exp == "Chthonian Stars":
            CAREERS.update(CHTHONIAN_STARS)
            del CAREERS["Nobility"]
            del CAREERS["Scout"]
            for spec in ('Star Marines', 'Support', 'Ground Assault'):
                SKILLS['Marines', spec] = tuple((('Recon', v)
                                                if k == 'Battle Dress' else (k, v)
                                                for k, v in SKILLS['Marines', 'Star Marines']))
        if exp == "Dilettante":
            CAREERS.update(DILETTANTE)
        if exp == "Agent":
            CAREERS.update(AGENT)
            del CAREERS["Agent"]
        if exp == "Scoundrel":
            CAREERS.update(SCOUNDREL)
            del CAREERS["Drifter"]
            if "Drifter" in FALLBACK_CAREERS:
                FALLBACK_CAREERS.remove("Drifter")
            FALLBACK_CAREERS.extend(("Wanderer", "Scavenger"))


def up1(text):
    return text[0].upper()+text[1:]


def setseed(s):
    if s:
        sd = int(s, 16)
    else:
        sd = hash(time())
    seed(sd)
    return sd


if __name__ == "__main__":

    try:

        args = {k.replace("-", ""): v
                for k, v in docopt(__doc__, version=__version__).items()}

        sd = setseed(args['randomseed'])

        if args['animal']:
            animal = Animal(behavior=args['behavior'],
                            order=args['order'],
                            terrain=args['terrain'],
                            sentient=args['sentient'])
            print animal
            print "Random seed: %x" % sd
            sys.exit()

        if args['UPP']:
            upp = Stats(method=args['method'], psi=args['psi'])
            print upp
            sys.exit()

        if args['roll']:
            D = args['DICE']
            if D.startswith("+"):
                add = True
                D = D.replace("+", "")
            else:
                add = False
            n, d = [int(x) for x in D.split('d')]
            if add:
                print die(d)(n)
            else:
                roll = [str(die(d)(1)) for i in range(n)]
                print ' '.join(roll)
            sys.exit()

        if args['path']:
            path = [term.split(":")
                    for term in args['path'].split("::")]
        else:
            path = None
            args["path"] = ''

        set_expansions(EXPANSIONS)

        if args["psi"] or args["path"].find("Psion") > -1:
            CAREERS.update(PSION)
            args["psi"] = args["psi"] or "traditional"

        if args["list"]:
            if args["char"]:
                print "Available careers and specializations:"
                for career in sorted(c for c in CAREERS.keys()
                                     if c.find("Officer") == -1):
                    specs = ', '.join(sorted(s for s in CAREERS[career]))
                    print "  " + career + ": " + specs
            elif args["animal"]:
                pass
                # TODO
            sys.exit()

        m = int(args["maxcareers"]) if args["maxcareers"] else 1000

        for i in range(1000):
            if i == 999:
                raise ValueError("Too many iterations.")

            sd = setseed(args['randomseed'])

            c = Character(name=args["name"],
                          homeworld=args["homeworld"],
                          gender=args["gender"],
                          upp=args["upp"],
                          ethnicity=args["ethnicity"],
                          terms=int(args["terms"]),
                          path=path,
                          method=args["method"],
                          rand_age=args["randage"],
                          personality=args["personality"],
                          show_hist=args["showhist"],
                          psi=args["psi"])

            n = len(set((t["Career"] for t in c.cp.terms)))
            if n <= m:
                break

    except KeyboardInterrupt:
        pass

    except Exception as e:
        #raise
        print "Something unfortunate has happened. [%s]" % e

    else:
        sys.stdout.write(repr(c)+"\n")
        print "Random seed: %x" % sd

    sys.exit()
